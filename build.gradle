plugins {
    id 'de.undercouch.download' version '4.1.1'
    id 'maven-publish'
}

import de.undercouch.gradle.tasks.download.Download

group 'com.jetbrains.jdk'

def supportedPlatforms = ['osx', 'windows', 'linux']
/* the JBR distro is only available on linux aarch 64  for what ever reason JetBrains decided to not use the "nomod" distro type in that case*/
def distroTypes = ['jbr', 'jbr_jcef', 'jbr_nomod', 'jbrsdk']

// parse the versions to install
def slurper = new groovy.json.JsonSlurper()
def actual_jdk_map = slurper.parseText(jdk_map)

for (someJDKVersion in actual_jdk_map) {
    def jdk_version = someJDKVersion.key
    for (jdk_build in someJDKVersion.value) {
        def currentVersionBuildClassifier = jdk_version + "-" + jdk_build
        logger.warn(jdk_version + "-" + jdk_build)

        // actual downloading
        for (platform in supportedPlatforms) {
            def capitalizedPlatform = platform.capitalize()
            for (distroType in distroTypes) {
                def capitalizedDistroType = distroType.capitalize()
                def supportedArchitectures = supportedArch(platform, distroType)
                for (platformClassifier in supportedArchitectures) {
                    def downloadTask = tasks.create(name: downloadTaskName(capitalizedDistroType, capitalizedPlatform, platformClassifier, currentVersionBuildClassifier ), type: Download) {
                        def fileName = "${distroType}-${jdk_version}-${platformClassifier}-${jdk_build}.tar.gz"
                        if(platform == 'linux' && distroType == 'jbr_nomod' && platformClassifier.endsWith("aarch64")) {
                            fileName = "jbr-${jdk_version}-${platformClassifier}-${jdk_build}.tar.gz"
                        }
                        logger.warn("https://cache-redirector.jetbrains.com/intellij-jbr/$fileName")
                        src "https://cache-redirector.jetbrains.com/intellij-jbr/$fileName"
                        //src "https://cache-redirector.jetbrains.com/intellij-jbr/$fileName"
                        dest "$buildDir/$fileName"
                        overwrite false
                    }
                }
            }
        }

        // actual publishing
        publishing {
            for(distroType in distroTypes) {
                publications.create(distroType+"-"+jdk_version+jdk_build, MavenPublication) {
                    for(platform in supportedPlatforms) {
                        for(platformClassifier in supportedArch(platform, distroType)) {
                            def downloadTask = tasks.getByName(downloadTaskName(distroType.capitalize(),platform.capitalize(), platformClassifier, currentVersionBuildClassifier ))
                            artifact(downloadTask.dest) {
                                classifier platformClassifier
                                builtBy downloadTask
                                extension 'tgz'
                            }
                        }
                    }
                    artifactId distroType
                    version "${jdk_version}-${jdk_build}"
                }
            }
        }
    }
}

private String downloadTaskName(capitalizedDistroType, capitalizedPlatform, platformClassifier, versionBuildClassifier) {
    'get' + capitalizedDistroType + capitalizedPlatform + platformClassifier + versionBuildClassifier
}

private List<String> supportedArch(platform, distroType) {
    if(platform == 'osx')
    {
        return ["${platform}-x64", "${platform}-aarch64"]
    } else if (platform == 'windows') {
        return ["${platform}-x64"]
    } else if (platform == 'linux') {
        if(distroType == 'jbr_nomod'|| distroType == 'jbrsdk') {
            return ["${platform}-x64"/*, "${platform}-aarch64"*/]
        } else {
            return ["${platform}-x64"]
        }
    }
    throw new GradleException("unsupported platform")
}

publishing {
    // repositories {
    //     maven {
    //         if (project.hasProperty('nexusUsername')) {
    //             credentials {
    //                 username project.getProperty('nexusUsername')
    //                 password project.getProperty('nexusPassword')
    //             }
    //         }
    //         url project.findProperty('repository') ?: 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
    //     }
    // }

    repositories {
        if(getCurrentGitBranch() == "master" || getCurrentGitBranch().startsWith("publish/v")) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/mbeddr/build.publish.jdk")
                if(project.hasProperty("gpr.token")) {
                    credentials {
                        username = project.findProperty("gpr.user")
                        password = project.findProperty("gpr.token")
                    }
                }
            }
        }
    }
}

private String getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}
