plugins {
    id 'de.undercouch.download' version '5.6.0'
    id 'maven-publish'
}

import de.undercouch.gradle.tasks.download.Download

group 'com.jetbrains.jdk'

def supportedPlatforms = ['osx', 'windows', 'linux']

def distroTypes = ['jbr_jcef', 'jbr', 'jbrsdk']



for (platform in supportedPlatforms) {

    def capitalizedPlatform = platform.capitalize()
    for (distroType in distroTypes) {


        def capitalizedDistroType = distroType.capitalize()
        def supportedArchitectures = supportedArch(platform, distroType)

        for (platformClassifier in supportedArchitectures) {

            def downloadTask = tasks.create(name: downloadTaskName(capitalizedDistroType, capitalizedPlatform, platformClassifier), type: Download) {
                def fileName = "${distroType}-${jdk_version}-${platformClassifier}-${jdk_build}.tar.gz"

                logger.warn("https://cache-redirector.jetbrains.com/intellij-jbr/$fileName")
                src "https://cache-redirector.jetbrains.com/intellij-jbr/$fileName"
                //src "https://cache-redirector.jetbrains.com/intellij-jbr/$fileName"
                dest "$buildDir/$fileName"
                overwrite false
            }
        }
    }
}

publishing {
    for(distroType in distroTypes) {
        publications.create(distroType, MavenPublication) {
            for(platform in supportedPlatforms) {
                for(platformClassifier in supportedArch(platform, distroType)) {
                    def downloadTask = tasks.getByName(downloadTaskName(distroType.capitalize(),platform.capitalize(), platformClassifier))
                    artifact(downloadTask.dest) {
                        classifier platformClassifier
                        builtBy downloadTask
                        extension 'tgz'

                    }
                }
            }
            artifactId distroType
            version "${jdk_version}-${jdk_build}"
            pom {
                licenses {
                    // official SPDX identifier
                    // see https://spdx.org/licenses/ for list
                    license {
                        name = "GPL-2.0-only"
                        url = "https://github.com/JetBrains/JetBrainsRuntime/blob/jb${jdk_version}-${jdk_build}/LICENSE"
                        comments = "GNU GENERAL PUBLIC LICENSE Version 2, June 1991"
                        distribution = "repo"
                    }
                    license {
                        name = "WITH Classpath-exception-2.0"
                        url = "https://github.com/JetBrains/JetBrainsRuntime/blob/jb${jdk_version}-${jdk_build}/ADDITIONAL_LICENSE_INFO"
                        comments = "Oracle Classpath exception 2.0"
                        distribution = "repo"
                    }
                    license {
                        name = "WITH OpenJDK-assembly-exception-1.0"
                        url = "https://github.com/JetBrains/JetBrainsRuntime/blob/jb${jdk_version}-${jdk_build}/ASSEMBLY_EXCEPTION"
                        comments = "OpenJDK Assembly exception 1.0"
                        distribution = "repo"
                    }
                }
                organization {
                    name = "JetBrains s.r.o"
                    url = "https://www.jetbrains.com"
                }
                scm {
                    tag = "jb${jdk_version}-${jdk_build}"
                    url = "https://github.com/JetBrains/JetBrainsRuntime.git"
                }
            }
        }
    }
}

private String downloadTaskName(capitalizedDistroType, capitalizedPlatform, platformClassifier) {
    'get' + capitalizedDistroType + capitalizedPlatform + platformClassifier
}

private List<String> supportedArch(platform, distroType) {
    if(platform == 'osx')
    {
        return ["${platform}-x64", "${platform}-aarch64"]
    } else if (platform == 'windows') {
        return ["${platform}-x64"]
    } else if (platform == 'linux') {
        return ["${platform}-x64", "${platform}-aarch64"]
    }
    throw new GradleException("unsupported platform")
}

publishing {
    repositories {
        repositories {
            maven {
                name = "itemisCloud"
                url = project.version.contains("SNAPSHOT")
                        ? uri("https://artifacts.itemis.cloud/repository/maven-mps-snapshots/")
                        : uri("https://artifacts.itemis.cloud/repository/maven-mps-releases/")
                if (project.hasProperty("artifacts.itemis.cloud.user") && project.hasProperty("artifacts.itemis.cloud.pw")) {
                    credentials {
                        username = project.findProperty("artifacts.itemis.cloud.user")
                        password = project.findProperty("artifacts.itemis.cloud.pw")
                    }
                }
            }
           
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/mbeddr/build.publish.jdk")
                if(project.hasProperty("gpr.token")) {
                    credentials {
                        username = project.findProperty("gpr.user")
                        password = project.findProperty("gpr.token")
                    }
                }
            }
        }
    }
}
